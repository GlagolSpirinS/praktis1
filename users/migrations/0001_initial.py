# Generated by Django 5.1.3 on 2024-11-22 15:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название отдела')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(choices=[('Мужчина', 'Мужчина'), ('Женщина', 'Женщина')], max_length=20, null=True, verbose_name='Пол')),
                ('position', models.CharField(choices=[('Руководитель отдела корпоративных финансов', 'Руководитель отдела корпоративных финансов'), ('Менеджер по слияниям и поглощениям', 'Менеджер по слияниям и поглощениям'), ('Финансовый аналитик', 'Финансовый аналитик'), ('Специалист по оценке бизнеса', 'Специалист по оценке бизнеса'), ('Специалист по структурированию сделок', 'Специалист по структурированию сделок'), ('Специалист по финансовому моделированию', 'Специалист по финансовому моделированию'), ('Руководитель отдела инвестиционного банкинга', 'Руководитель отдела инвестиционного банкинга'), ('Аналитик по инвестиционному банкингу', 'Аналитик по инвестиционному банкингу'), ('Менеджер по работе с клиентами', 'Менеджер по работе с клиентами'), ('Специалист по рынку капитала', 'Специалист по рынку капитала'), ('Специалист по IPO', 'Специалист по IPO'), ('Специалист по структурированным финансовым продуктам', 'Специалист по структурированным финансовым продуктам'), ('Руководитель отдела управления активами', 'Руководитель отдела управления активами'), ('Портфельный менеджер', 'Портфельный менеджер'), ('Аналитик по инвестициям', 'Аналитик по инвестициям'), ('Специалист по риск-менеджменту', 'Специалист по риск-менеджменту'), ('Специалист по финансовому планированию', 'Специалист по финансовому планированию'), ('Специалист по работе с клиентами', 'Специалист по работе с клиентами'), ('Руководитель отдела частного банкинга', 'Руководитель отдела частного банкинга'), ('Частный банкир', 'Частный банкир'), ('Специалист по финансовому планированию', 'Специалист по финансовому планированию'), ('Специалист по инвестициям', 'Специалист по инвестициям'), ('Специалист по кредитованию', 'Специалист по кредитованию'), ('Менеджер по работе с клиентами', 'Менеджер по работе с клиентами'), ('Руководитель отдела риск-менеджмента', 'Руководитель отдела риск-менеджмента'), ('Менеджер по управлению рисками', 'Менеджер по управлению рисками'), ('Специалист по кредитному риску', 'Специалист по кредитному риску'), ('Специалист по рыночному риску', 'Специалист по рыночному риску'), ('Специалист по операционному риску', 'Специалист по операционному риску'), ('Специалист по моделированию рисков', 'Специалист по моделированию рисков'), ('Руководитель отдела финансового контроля', 'Руководитель отдела финансового контроля'), ('Финансовый контролер', 'Финансовый контролер'), ('Бухгалтер', 'Бухгалтер'), ('Аналитик финансовой отчетности', 'Аналитик финансовой отчетности'), ('Специалист по налогам', 'Специалист по налогам'), ('Специалист по внутреннему аудиту', 'Специалист по внутреннему аудиту'), ('Руководитель отдела информационных технологий', 'Руководитель отдела информационных технологий'), ('Менеджер по информационным технологиям', 'Менеджер по информационным технологиям'), ('Разработчик программного обеспечения', 'Разработчик программного обеспечения'), ('Системный аналитик', 'Системный аналитик'), ('Специалист по информационной безопасности', 'Специалист по информационной безопасности'), ('Администратор баз данных', 'Администратор баз данных'), ('Руководитель отдела кадров', 'Руководитель отдела кадров'), ('Менеджер по персоналу', 'Менеджер по персоналу'), ('Специалист по подбору персонала', 'Специалист по подбору персонала'), ('Специалист по обучению и развитию', 'Специалист по обучению и развитию'), ('Специалист по компенсациям и льготам', 'Специалист по компенсациям и льготам'), ('Специалист по трудовым отношениям', 'Специалист по трудовым отношениям'), ('Руководитель отдела маркетинга и коммуникаций', 'Руководитель отдела маркетинга и коммуникаций'), ('Менеджер по маркетингу', 'Менеджер по маркетингу'), ('Специалист по брендингу', 'Специалист по брендингу'), ('Специалист по цифровому маркетингу', 'Специалист по цифровому маркетингу'), ('Специалист по PR', 'Специалист по PR'), ('Специалист по контенту', 'Специалист по контенту'), ('Руководитель отдела клиентского обслуживания', 'Руководитель отдела клиентского обслуживания'), ('Менеджер по работе с клиентами', 'Менеджер по работе с клиентами'), ('Специалист по клиентскому обслуживанию', 'Специалист по клиентскому обслуживанию'), ('Специалист по обработке заявок', 'Специалист по обработке заявок'), ('Специалист по технической поддержке', 'Специалист по технической поддержке'), ('Специалист по работе с жалобами', 'Специалист по работе с жалобами')], max_length=100, null=True, verbose_name='Должность')),
                ('shift', models.CharField(choices=[('Дневная смена', 'Дневная смена'), ('Вечерняя смена', 'Вечерняя смена'), ('Ночная смена', 'Ночная смена'), ('Сменный график', 'Сменный график'), ('Скользящий график', 'Скользящий график'), ('Половинная смена', 'Половинная смена'), ('Гибкий график', 'Гибкий график'), ('Ротационная смена', 'Ротационная смена')], max_length=100, null=True, verbose_name='Смена')),
                ('avatar', models.ImageField(blank=True, default=users.models.get_default_avatar, null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.department', verbose_name='Отдел')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('status', models.CharField(choices=[('new', 'Новое'), ('in_progress', 'В процессе'), ('completed', 'Завершено'), ('cancelled', 'Отменено')], default='new', max_length=20, verbose_name='Статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to=settings.AUTH_USER_MODEL, verbose_name='Назначено')),
            ],
        ),
        migrations.CreateModel(
            name='TaskAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='task_attachments/', verbose_name='Файл')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата загрузки')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='users.task', verbose_name='Задание')),
            ],
        ),
        migrations.CreateModel(
            name='FileComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата комментария')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('attachment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='users.taskattachment', verbose_name='Прикрепленный файл')),
            ],
        ),
    ]
